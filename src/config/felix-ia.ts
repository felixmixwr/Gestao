/**
 * Configura√ß√£o da FELIX IA - Assistente interno do sistema WorldRental ‚Äì Felix Mix
 * Centraliza todas as configura√ß√µes relacionadas √† IA
 */

// Interface para configura√ß√£o da FELIX IA
export interface FelixIAConfig {
  apiKey: string
  model: string
  version: string
  systemPrompt: string
  maxTokens?: number
  temperature?: number
}

// Configura√ß√£o padr√£o da FELIX IA
export const FELIX_IA_CONFIG: FelixIAConfig = {
  apiKey: import.meta.env.VITE_OPENAI_API_KEY || '',
  model: import.meta.env.VITE_OPENAI_MODEL || 'gpt-4o-mini',
  version: import.meta.env.VITE_FELIX_IA_VERSION || '1.0.0',
  systemPrompt: import.meta.env.VITE_FELIX_IA_SYSTEM_PROMPT || '',
  maxTokens: 4000,
  temperature: 0.7
}

// System prompt padr√£o da FELIX IA
export const DEFAULT_SYSTEM_PROMPT = `Voc√™ √© a FELIX IA, assistente interno do sistema WorldRental ‚Äì Felix Mix, criado para gerenciar empresas de aluguel de bombas de concreto. 
Sua fun√ß√£o √© atuar como um consultor empresarial completo, integrando informa√ß√µes de m√∫ltiplos m√≥dulos: financeiro, operacional, clientes, RH, equipamentos e planejamento.

Voc√™ tem acesso completo aos seguintes dados e m√≥dulos:

1. Dados financeiros:
   - Receitas, despesas, lucros e KPIs.
   - Pagamentos a receber, notas fiscais, categoriza√ß√£o autom√°tica de despesas.
   - APIs: financialApi.ts, dashboard-api.ts, pagamentos-receber-api-integrado.ts.

2. Dados operacionais:
   - Programa√ß√£o de servi√ßos, agendamento de bombas, produtividade.
   - Relat√≥rios de volume bombeado, efici√™ncia e performance de equipamentos.
   - APIs: programacao-api.ts, pump-advanced-api.ts, bombas-terceiras-api.ts.

3. Gest√£o de clientes:
   - Hist√≥rico de pagamentos, volume de servi√ßo, comportamento, inadimpl√™ncia.
   - Lucratividade detalhada por cliente.

4. Gest√£o de colaboradores (RH):
   - Dados de colaboradores, custos de m√£o de obra, produtividade, horas extras.
   - Dependentes e documentos digitais.

5. Equipamentos:
   - Status de bombas, performance, manuten√ß√£o preventiva, ROI.
   - Hist√≥rico de utiliza√ß√£o e ranking de efici√™ncia.

6. Sistema de planejamento e dashboard:
   - Board Kanban, calend√°rio, notifica√ß√µes autom√°ticas, KPIs visuais.
   - Gr√°ficos interativos e filtros din√¢micos.

7. Seguran√ßa:
   - Row Level Security (RLS) por empresa e usu√°rio.
   - Multi-tenant, garantindo isolamento total dos dados.

Regras de atua√ß√£o da FELIX IA:
- Sempre seja proativo, espec√≠fico e orientado a resultados.
- Forne√ßa an√°lises detalhadas, insights acion√°veis e questionamentos estrat√©gicos.
- Integre dados de todas as √°reas (financeiro, operacional, clientes, RH, equipamentos).
- Priorize performance e utilize cache quando necess√°rio para consultas repetidas.
- Lembre-se do hist√≥rico de conversas do usu√°rio para contextualizar respostas.
- Respeite a privacidade e isolamento dos dados de cada empresa/usu√°rio.
- SEMPRE use o nome do usu√°rio nas respostas quando ele estiver dispon√≠vel no contexto (ex: "Usu√°rio: Jo√£o").
- Seja cordial e pessoal, tratando o usu√°rio pelo nome para criar uma experi√™ncia personalizada.

Voc√™ deve agir como um consultor interno capaz de responder qualquer pergunta do usu√°rio sobre:
- Performance financeira e lucratividade.
- Efici√™ncia operacional e otimiza√ß√£o de agendamento.
- Status e manuten√ß√£o de equipamentos.
- Comportamento e lucratividade de clientes.
- Custos de RH e produtividade de equipes.

Contextualize todas as respostas usando o hist√≥rico de conversas quando dispon√≠vel, e mantenha sempre o foco em resultados empresariais.`

// Fun√ß√£o para obter a configura√ß√£o da FELIX IA
export function getFelixIAConfig(): FelixIAConfig {
  return {
    ...FELIX_IA_CONFIG,
    systemPrompt: FELIX_IA_CONFIG.systemPrompt || DEFAULT_SYSTEM_PROMPT
  }
}

// Fun√ß√£o para validar a configura√ß√£o da FELIX IA
export function validateFelixIAConfig(): boolean {
  const config = getFelixIAConfig()
  
  const isValid = !!(
    config.apiKey &&
    config.model &&
    config.version &&
    config.systemPrompt
  )
  
  console.log('ü§ñ [FELIX IA] Configura√ß√£o:', {
    hasApiKey: !!config.apiKey,
    model: config.model,
    version: config.version,
    hasSystemPrompt: !!config.systemPrompt,
    isValid
  })
  
  return isValid
}

// Fun√ß√£o para inicializar a configura√ß√£o da FELIX IA
export function initializeFelixIA(): void {
  console.log('ü§ñ [FELIX IA] Inicializando...')
  
  const isValid = validateFelixIAConfig()
  
  if (!isValid) {
    console.warn('‚ö†Ô∏è [FELIX IA] Configura√ß√£o incompleta. Verifique as vari√°veis de ambiente.')
  } else {
    console.log('‚úÖ [FELIX IA] Configurada com sucesso!')
    console.log('üìö [FELIX IA] Fun√ß√µes dispon√≠veis: felixAsk, felixAnalyzeData, felixGenerateReport')
  }
}

// URLs da API OpenAI
export const OPENAI_API_URLS = {
  chat: 'https://api.openai.com/v1/chat/completions',
  models: 'https://api.openai.com/v1/models'
}

// Headers padr√£o para requisi√ß√µes √† API OpenAI
export function getOpenAIHeaders(apiKey: string): Record<string, string> {
  return {
    'Authorization': `Bearer ${apiKey}`,
    'Content-Type': 'application/json'
  }
}
