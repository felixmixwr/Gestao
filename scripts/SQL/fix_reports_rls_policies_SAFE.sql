-- Script SEGURO para corrigir pol√≠ticas RLS da tabela reports
-- Verifica se pol√≠ticas existem antes de criar novas

-- 1. Verificar se RLS est√° habilitado
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE tablename = 'reports';

-- 2. Habilitar RLS se n√£o estiver habilitado
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;

-- 3. Remover TODAS as pol√≠ticas existentes para evitar conflitos
DO $$ 
DECLARE
    policy_record RECORD;
BEGIN
    -- Listar e remover todas as pol√≠ticas existentes
    FOR policy_record IN 
        SELECT policyname 
        FROM pg_policies 
        WHERE tablename = 'reports' AND schemaname = 'public'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON public.reports', policy_record.policyname);
        RAISE NOTICE 'Pol√≠tica removida: %', policy_record.policyname;
    END LOOP;
    
    RAISE NOTICE '‚úÖ Todas as pol√≠ticas existentes foram removidas';
END $$;

-- 4. Criar pol√≠ticas permissivas para usu√°rios autenticados
DO $$ 
BEGIN
    -- Pol√≠tica para SELECT - permite visualizar todos os relat√≥rios
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'reports' 
        AND policyname = 'Allow authenticated users to select reports'
        AND schemaname = 'public'
    ) THEN
        CREATE POLICY "Allow authenticated users to select reports" ON public.reports
        FOR SELECT 
        TO authenticated
        USING (true);
        RAISE NOTICE '‚úÖ Pol√≠tica SELECT criada';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Pol√≠tica SELECT j√° existe';
    END IF;
    
    -- Pol√≠tica para INSERT - permite criar novos relat√≥rios
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'reports' 
        AND policyname = 'Allow authenticated users to insert reports'
        AND schemaname = 'public'
    ) THEN
        CREATE POLICY "Allow authenticated users to insert reports" ON public.reports
        FOR INSERT 
        TO authenticated
        WITH CHECK (true);
        RAISE NOTICE '‚úÖ Pol√≠tica INSERT criada';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Pol√≠tica INSERT j√° existe';
    END IF;
    
    -- Pol√≠tica para UPDATE - permite atualizar relat√≥rios
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'reports' 
        AND policyname = 'Allow authenticated users to update reports'
        AND schemaname = 'public'
    ) THEN
        CREATE POLICY "Allow authenticated users to update reports" ON public.reports
        FOR UPDATE 
        TO authenticated
        USING (true)
        WITH CHECK (true);
        RAISE NOTICE '‚úÖ Pol√≠tica UPDATE criada';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Pol√≠tica UPDATE j√° existe';
    END IF;
    
    -- Pol√≠tica para DELETE - permite deletar relat√≥rios (opcional)
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'reports' 
        AND policyname = 'Allow authenticated users to delete reports'
        AND schemaname = 'public'
    ) THEN
        CREATE POLICY "Allow authenticated users to delete reports" ON public.reports
        FOR DELETE 
        TO authenticated
        USING (true);
        RAISE NOTICE '‚úÖ Pol√≠tica DELETE criada';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Pol√≠tica DELETE j√° existe';
    END IF;
    
    RAISE NOTICE 'üéâ Todas as pol√≠ticas RLS foram configuradas com sucesso!';
END $$;

-- 5. Verificar pol√≠ticas criadas
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'reports' AND schemaname = 'public'
ORDER BY policyname;

-- 6. Verificar se RLS est√° funcionando
SELECT 
  'RLS Status' as info,
  CASE 
    WHEN rowsecurity THEN 'Habilitado' 
    ELSE 'Desabilitado' 
  END as status
FROM pg_tables 
WHERE tablename = 'reports' AND schemaname = 'public';

-- 7. Contar pol√≠ticas ativas
SELECT 
  'Pol√≠ticas Ativas' as info,
  COUNT(*) as total_policies
FROM pg_policies 
WHERE tablename = 'reports' AND schemaname = 'public';

-- 8. Teste opcional de inser√ß√£o (descomente se necess√°rio)
/*
DO $$
DECLARE
    test_report_id UUID;
    client_count INTEGER;
    pump_count INTEGER;
    company_count INTEGER;
BEGIN
    -- Verificar se h√° dados necess√°rios
    SELECT COUNT(*) INTO client_count FROM public.clients;
    SELECT COUNT(*) INTO pump_count FROM public.pumps;
    SELECT COUNT(*) INTO company_count FROM public.companies;
    
    IF client_count = 0 OR pump_count = 0 OR company_count = 0 THEN
        RAISE NOTICE '‚ö†Ô∏è Dados insuficientes para teste (clientes: %, bombas: %, empresas: %)', 
                     client_count, pump_count, company_count;
        RETURN;
    END IF;
    
    -- Tentar inserir um relat√≥rio de teste
    INSERT INTO public.reports (
        report_number,
        date,
        client_id,
        pump_id,
        company_id,
        start_date,
        end_date,
        total_hours,
        status,
        client_rep_name,
        pump_prefix,
        realized_volume,
        total_value
    ) VALUES (
        'TEST-' || EXTRACT(EPOCH FROM NOW())::TEXT,
        CURRENT_DATE,
        (SELECT id FROM public.clients LIMIT 1),
        (SELECT id FROM public.pumps LIMIT 1),
        (SELECT id FROM public.companies LIMIT 1),
        NOW(),
        NOW(),
        1,
        'ENVIADO_FINANCEIRO',
        'Teste',
        'TEST',
        10.5,
        1000.00
    ) RETURNING id INTO test_report_id;
    
    IF test_report_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Teste de inser√ß√£o bem-sucedido! ID: %', test_report_id;
        
        -- Limpar o relat√≥rio de teste
        DELETE FROM public.reports WHERE id = test_report_id;
        RAISE NOTICE '‚úÖ Relat√≥rio de teste removido';
    ELSE
        RAISE NOTICE '‚ùå Falha no teste de inser√ß√£o';
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erro no teste: %', SQLERRM;
END $$;
*/




