// Script para registrar push notification com JWT
// Execute este script no console do navegador

console.log('üöÄ REGISTRO DE PUSH NOTIFICATION COM JWT')
console.log('=' .repeat(50))

async function registerPushJWT() {
  try {
    // 1. Verificar se o Supabase est√° dispon√≠vel
    if (!window.supabase) {
      throw new Error('Supabase client n√£o est√° dispon√≠vel no window')
    }
    
    console.log('‚úÖ Supabase client dispon√≠vel')
    
    // 2. Verificar se o usu√°rio est√° autenticado
    const { data: { user }, error: userError } = await window.supabase.auth.getUser()
    
    if (userError) {
      throw new Error('Erro ao verificar usu√°rio: ' + userError.message)
    }
    
    if (!user) {
      throw new Error('Usu√°rio n√£o est√° autenticado. Fa√ßa login primeiro.')
    }
    
    console.log('üë§ Usu√°rio autenticado:', user.id)
    console.log('üìß Email:', user.email)
    
    // 3. Verificar permiss√£o de notifica√ß√£o
    console.log('üì± Verificando permiss√£o de notifica√ß√£o...')
    let permission = Notification.permission
    console.log('Permiss√£o atual:', permission)
    
    if (permission === 'default') {
      console.log('üîî Solicitando permiss√£o...')
      permission = await Notification.requestPermission()
      console.log('Nova permiss√£o:', permission)
    }
    
    if (permission !== 'granted') {
      throw new Error('Permiss√£o de notifica√ß√£o negada pelo usu√°rio')
    }
    
    // 4. Registrar Service Worker
    console.log('üìù Registrando Service Worker...')
    const registration = await navigator.serviceWorker.register('/sw.js')
    console.log('‚úÖ Service Worker registrado:', registration.scope)
    
    // 5. Aguardar o Service Worker estar ativo
    console.log('‚è≥ Aguardando Service Worker ficar ativo...')
    await navigator.serviceWorker.ready
    console.log('‚úÖ Service Worker ativo')
    
    // 6. Verificar subscription existente
    let subscription = await registration.pushManager.getSubscription()
    console.log('Subscription existente:', subscription ? 'Sim' : 'N√£o')
    
    if (!subscription) {
      console.log('üîÑ Criando nova subscription...')
      
      // VAPID Key
      const VAPID_PUBLIC_KEY = 'BBNAVQi46g1rgjQ2nF9kkDt--WPXzFFVIhQm5D9UvAGlAfO1sCORVCnd6MFpEABZvy0PuyECaXL-WxAzuILcnpA'
      
      // Fun√ß√£o para converter VAPID
      function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4)
        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
        const rawData = atob(base64)
        const outputArray = new Uint8Array(rawData.length)
        
        for (let i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i)
        }
        return outputArray
      }
      
      try {
        // Tentar criar subscription com VAPID
        console.log('üîë Tentando com VAPID key...')
        subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY)
        })
        console.log('‚úÖ Subscription criada com VAPID!')
        
      } catch (vapidError) {
        console.warn('‚ö†Ô∏è Erro com VAPID:', vapidError.message)
        
        try {
          // Tentar sem applicationServerKey
          console.log('üîÑ Tentando sem VAPID (GCM)...')
          subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true
          })
          console.log('‚úÖ Subscription criada com GCM!')
          
        } catch (gcmError) {
          console.error('‚ùå Erro com GCM tamb√©m:', gcmError.message)
          throw gcmError
        }
      }
    }
    
    // 7. Salvar no banco de dados
    console.log('üíæ Salvando subscription no banco de dados...')
    
    // Desativar tokens antigos do usu√°rio
    const { error: updateError } = await window.supabase
      .from('user_push_tokens')
      .update({ is_active: false })
      .eq('user_id', user.id)
    
    if (updateError) {
      console.warn('‚ö†Ô∏è Erro ao desativar tokens antigos:', updateError.message)
    }
    
    // Inserir novo token
    const { error: insertError } = await window.supabase
      .from('user_push_tokens')
      .insert({
        user_id: user.id,
        endpoint: subscription.endpoint,
        p256dh: subscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(subscription.getKey('p256dh')))) : null,
        auth: subscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(subscription.getKey('auth')))) : null,
        is_active: true
      })
    
    if (insertError) {
      throw new Error('Erro ao salvar token no banco: ' + insertError.message)
    }
    
    console.log('‚úÖ Token salvo no banco de dados com sucesso!')
    
    // 8. Verificar se foi salvo
    const { data: savedToken, error: verifyError } = await window.supabase
      .from('user_push_tokens')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single()
    
    if (verifyError) {
      console.warn('‚ö†Ô∏è Erro ao verificar token salvo:', verifyError.message)
    } else {
      console.log('‚úÖ Token verificado no banco:', savedToken.id)
    }
    
    // 9. Testar notifica√ß√£o
    console.log('üß™ Testando notifica√ß√£o...')
    await registration.showNotification('Push Notification Teste', {
      body: 'Se voc√™ est√° vendo isso, o push est√° funcionando!',
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'jwt-test'
    })
    
    console.log('‚úÖ Notifica√ß√£o de teste enviada!')
    
    // 10. Testar Edge Function
    console.log('üöÄ Testando Edge Function...')
    try {
      const { data: testResult, error: testError } = await window.supabase.functions.invoke('send-notification', {
        body: {
          userIds: [user.id],
          title: 'Teste via Edge Function',
          body: 'Esta notifica√ß√£o foi enviada via Edge Function!',
          data: { type: 'jwt_test' }
        }
      })
      
      if (testError) {
        console.warn('‚ö†Ô∏è Erro na Edge Function:', testError.message)
      } else {
        console.log('‚úÖ Edge Function funcionando:', testResult)
      }
    } catch (edgeError) {
      console.warn('‚ö†Ô∏è Erro ao testar Edge Function:', edgeError.message)
    }
    
    console.log('üéâ REGISTRO JWT CONCLU√çDO COM SUCESSO!')
    
    return {
      userId: user.id,
      subscription: subscription.endpoint,
      saved: true
    }
    
  } catch (error) {
    console.error('‚ùå Erro no registro JWT:', error.message)
    console.error('üîç Detalhes:', error)
    throw error
  }
}

// Executar
registerPushJWT().then(result => {
  console.log('üéâ RESULTADO FINAL:', result)
}).catch(error => {
  console.error('üí• Falha no registro JWT:', error)
})
